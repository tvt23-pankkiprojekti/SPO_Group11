-- MySQL Script generated by MySQL Workbench
-- Sat Apr 20 22:51:25 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';


-- -----------------------------------------------------
-- Table `User`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `User` ;

CREATE TABLE IF NOT EXISTS `User` (
  `idUser` INT NOT NULL AUTO_INCREMENT,
  `firstName` VARCHAR(45) NOT NULL,
  `lastName` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idUser`),
  UNIQUE INDEX `idUser_UNIQUE` (`idUser` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Account`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Account` ;

CREATE TABLE IF NOT EXISTS `Account` (
  `idAccount` INT NOT NULL AUTO_INCREMENT,
  `User_id` INT NOT NULL,
  `type` ENUM('debit', 'credit') NOT NULL,
  `balance` DECIMAL(10,2) NOT NULL DEFAULT 0,
  `limit` DECIMAL(10,2) NOT NULL DEFAULT 0,
  `accountNumber` VARCHAR(255) NOT NULL,
  UNIQUE INDEX `accountId_UNIQUE` (`idAccount` ASC) VISIBLE,
  PRIMARY KEY (`idAccount`),
  INDEX `fk_Account_User` (`User_id` ASC) VISIBLE,
  UNIQUE INDEX `AccountNumber_UNIQUE` (`accountNumber` ASC) VISIBLE,
  CONSTRAINT `fk_Account_User`
    FOREIGN KEY (`User_id`)
    REFERENCES `User` (`idUser`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Card`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Card` ;

CREATE TABLE IF NOT EXISTS `Card` (
  `idCard` INT NOT NULL AUTO_INCREMENT,
  `User_id` INT NOT NULL,
  `pinHash` VARCHAR(255) NOT NULL,
  `number` VARCHAR(16) NOT NULL,
  `frozen` TINYINT NOT NULL DEFAULT 0,
  `failedPinAttempts` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`idCard`),
  UNIQUE INDEX `idCard_UNIQUE` (`idCard` ASC) VISIBLE,
  INDEX `fk_Card_User1_idx` (`User_id` ASC) VISIBLE,
  UNIQUE INDEX `number_UNIQUE` (`number` ASC) VISIBLE,
  CONSTRAINT `fk_Card_User1`
    FOREIGN KEY (`User_id`)
    REFERENCES `User` (`idUser`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Transaction`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Transaction` ;

CREATE TABLE IF NOT EXISTS `Transaction` (
  `idTransaction` INT NOT NULL AUTO_INCREMENT,
  `Account_id` INT NOT NULL,
  `dateTime` DATETIME NOT NULL,
  `balanceChange` DECIMAL(10,2) NOT NULL,
  `transactionType` ENUM('withdraw', 'deposit') NOT NULL,
  PRIMARY KEY (`idTransaction`),
  UNIQUE INDEX `id_UNIQUE` (`idTransaction` ASC) VISIBLE,
  INDEX `fk_Transaction_Account_idx` (`Account_id` ASC) VISIBLE,
  CONSTRAINT `fk_Transaction_Account`
    FOREIGN KEY (`Account_id`)
    REFERENCES `Account` (`idAccount`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Friend`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Friend` ;

CREATE TABLE IF NOT EXISTS `Friend` (
  `idFriend` INT NOT NULL AUTO_INCREMENT,
  `User_id` INT NOT NULL,
  `Account_id` INT NOT NULL,
  INDEX `fk_Friend_Account_idx` (`Account_id` ASC) VISIBLE,
  PRIMARY KEY (`idFriend`),
  INDEX `fk_Friend_User` (`User_id` ASC) VISIBLE,
  CONSTRAINT `fk_Friend_User`
    FOREIGN KEY (`User_id`)
    REFERENCES `User` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Friend_Account`
    FOREIGN KEY (`Account_id`)
    REFERENCES `Account` (`idAccount`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Card_Account`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Card_Account` ;

CREATE TABLE IF NOT EXISTS `Card_Account` (
  `idCard_Account` INT NOT NULL AUTO_INCREMENT,
  `Card_id` INT NOT NULL,
  `Account_id` INT NOT NULL,
  PRIMARY KEY (`idCard_Account`),
  INDEX `fk_Card_Account_Card1_idx` (`Card_id` ASC) VISIBLE,
  INDEX `fk_Card_Account_Account1_idx` (`Account_id` ASC) VISIBLE,
  CONSTRAINT `fk_Card_Account_Card1`
    FOREIGN KEY (`Card_id`)
    REFERENCES `Card` (`idCard`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Card_Account_Account1`
    FOREIGN KEY (`Account_id`)
    REFERENCES `Account` (`idAccount`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Administrator`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Administrator` ;

CREATE TABLE IF NOT EXISTS `Administrator` (
  `idAdministrator` INT NOT NULL AUTO_INCREMENT,
  `login` VARCHAR(255) NOT NULL,
  `passwordHash` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`idAdministrator`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- procedure getCardAccounts
-- -----------------------------------------------------
DROP procedure IF EXISTS `getCardAccounts`;

CREATE PROCEDURE `getCardAccounts` (cardId INT)
BEGIN
	SELECT `accountNumber`, `type` FROM Account WHERE `idAccount` IN ( SELECT `Account_id` FROM Card_Account WHERE `Card_id` = cardId );
END;

-- -----------------------------------------------------
-- procedure withdraw
-- -----------------------------------------------------
DROP procedure IF EXISTS `withdraw`;

CREATE PROCEDURE `withdraw` (IN `accNum` VARCHAR(255), IN `amount` DECIMAL(10,2))
BEGIN
  DECLARE `updatedBalance` DECIMAL(10,2);
  DECLARE `accountType` ENUM('debit','credit');
  DECLARE `accId` INT;
  SET `amount` = ABS(`amount`); -- makes sure negative withdraw value will be positive. (Later will be turned to negative)
  SET `updatedBalance` = (SELECT `balance` FROM `Account` WHERE `accountNumber` = `accNum`) - (`amount`);
  SELECT `type` INTO `accountType` FROM `Account` WHERE `accountNumber` = `accNum`;
  SELECT `idAccount` INTO `accId` FROM `Account` WHERE `accountNumber` = `accNum`;
  -- DEBIT
  IF (`accountType`='debit') THEN
    IF (`updatedBalance` < 0) THEN
      SELECT 'LOW_DEBIT_MONEY' AS `message`;
    ELSE   
      -- updating balance on account
      UPDATE `Account` SET `balance` = `updatedBalance` WHERE `accountNumber` = `accNum`;
      -- creating new transaction
      INSERT INTO `Transaction` (`Account_id`, `dateTime`, `balanceChange`, `transactionType`) 
      VALUES (`accId`, NOW(), -(`amount`), 'withdraw');      
      -- successful withdrawal, hand off the amount as the message
      SELECT `amount` AS `message`;
    END IF;
  ELSE
  -- CREDIT
    IF (`updatedBalance` < (SELECT `limit` FROM `Account` WHERE `accountNumber` = `accNum`)) THEN
      SELECT 'LOW_CREDIT_MONEY' AS `message`;
    ELSE
      -- updating balance on account
      UPDATE `Account` SET `balance` = `updatedBalance` WHERE `accountNumber` = `accNum`;   
      -- creating new transaction
      INSERT INTO `Transaction` (`Account_id`, `dateTime`, `balanceChange`, `transactionType`) 
      VALUES (`accId`, NOW(), -(`amount`), 'withdraw');
      -- successful withdrawal, hand off the amount as the message
      SELECT `amount` AS `message`;
    END IF;
  END IF;
END;

-- -----------------------------------------------------
-- procedure getGeneralInfo
-- -----------------------------------------------------
DROP procedure IF EXISTS `getGeneralInfo`;

CREATE PROCEDURE `getGeneralInfo` (IN `AccNum` VARCHAR(255))
BEGIN
	DECLARE val_firstName VARCHAR(255);
    DECLARE val_lastName VARCHAR(255);
    DECLARE val_balance DECIMAL;
    DECLARE val_limit DECIMAL;
    
    SELECT User.firstName, User.lastName, Account.balance, Account.`limit`
    INTO val_firstName, val_lastName, val_balance, val_limit
    FROM Account
    INNER JOIN User ON User.idUser = (SELECT Account.User_id WHERE accountNumber = accNum);
    
    SELECT val_firstName AS firstName, val_lastName AS lastName, (val_balance - val_limit) AS balance;
END;

-- -----------------------------------------------------
-- procedure getTransactions
-- -----------------------------------------------------
DROP procedure IF EXISTS `getTransactions`;

CREATE PROCEDURE `getTransactions` (IN `AccNum` VARCHAR(255), IN `Index` INT, IN `Amount` INT)
BEGIN
	SELECT Transaction.dateTime, Transaction.balanceChange FROM `Account`
    INNER JOIN Transaction ON Transaction.Account_id = (SELECT Account.idAccount WHERE `accountNumber` = `AccNum`)
    ORDER BY Transaction.dateTime DESC
    LIMIT `Index`, `Amount`;
END;


DROP TRIGGER IF EXISTS `Account_BEFORE_INSERT` ;
CREATE DEFINER = CURRENT_USER TRIGGER `Account_BEFORE_INSERT` BEFORE INSERT ON `Account` FOR EACH ROW
BEGIN
SET NEW.`accountNumber` = UUID();
END;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
